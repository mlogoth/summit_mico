<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->  
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="use_trajectory_controller" default="false"/>
  <arg name="joint_velocity_controller" default="false"/>
  <arg name="joint_effort_controller" default="false"/>
  <arg name="joint_position_controller" default="true"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find summit_mico_gazebo)/worlds/summit_mico_office.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find summit_mico_description)/robots/summit_xl_hl_diff_mico.urdf.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model summit_mico -param robot_description"/>

  <!-- ros_control launch file -->
  <include file="$(find summit_mico_control)/launch/summit_mico_gazebo_control.launch">
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="joint_velocity_controller" value="$(arg joint_velocity_controller)"/>
    <arg name="joint_effort_controller" value="$(arg joint_effort_controller)"/>
    <arg name="joint_position_controller" value="$(arg joint_position_controller)"/>
  </include>

</launch>

